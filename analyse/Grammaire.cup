package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.arbre.expression.* ;
import plic.tds.*;
import plic.tds.entrees.*;
import plic.tds.symboles.*;
import plic.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER, EGAL,POINTVIRGULE, CLASS,ECR,FIN, VIRGULE ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON;
terminal String 	IDF,TYPE,STATUT,CONSTANTEINT, CONSTANTEBOOL;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG ;
non terminal Expression EXPR, CSTE ;

non terminal ArbreAbstrait SYSTEME, CLASSE, INSTRUCTION, AFFECT, ECRIRE, LDECL, DECLARATION, DECL_CONST, DECL_CHAMP;
non terminal String ACCES;
non terminal ArrayList<String> LIDF;

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
//start with PROG ;
start with SYSTEME ;

PROG    ::=     EXPR:e 
                {: BlocDInstructions arbre = new BlocDInstructions() ;
                   arbre.ajouter(e) ;
                   RESULT = arbre ; :}
                ;
    
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e) ; :}
                ;

SYSTEME ::= CLASSE:c
			{: System.out.println("systeme"); RESULT = c; :}
;


CLASSE ::= CLASS IDF LDECL:d FIN
			{: RESULT = d; :}
;

DECLARATION ::= DECL_CHAMP:d POINTVIRGULE
				{: RESULT = d; :}
		|	DECL_CONST:d	POINTVIRGULE
		 {: RESULT = d; :}
;

LDECL ::= DECLARATION:d
		{: BlocDInstructions l = new BlocDInstructions();
			l.ajouter(d);
			RESULT = l; :}
		|LDECL:l DECLARATION:d
		{: ((BlocDInstructions)l).ajouter(d);
			RESULT = l; :}
		;


LIDF ::= IDF:i
		{: System.out.println("lidf"); 
		ArrayList<String> lidf = new ArrayList<String>();
		lidf.add(i);
		RESULT = lidf; :}
		|LIDF:lidf VIRGULE IDF:i
		{: lidf.add(i);
		RESULT = lidf; :}
;

DECL_CHAMP ::= STATUT:s TYPE:t LIDF:n
				{: System.out.println("decl_champ " + s + " " + t + " " + n); 
				BlocDInstructions l = new BlocDInstructions();
				for(String nidf : n) {
					l.ajouter(new Declaration(nidf,t,s));
				}
				RESULT = l; :}
;


DECL_CONST ::= INSTRUCTION
			|DECL_CONST INSTRUCTION //rajouter le saut de ligne
;

INSTRUCTION ::=	 	AFFECT POINTVIRGULE
		|	ECRIRE POINTVIRGULE
;

AFFECT ::= ACCES:a EGAL EXPR:expr
{: System.out.println(a+" prend " +expr); :}

;

ACCES ::= IDF:i
{: System.out.println(i); :}
;

ECRIRE ::= ECR EXPR
//ecrireChaine
;

